import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as s,d as i,e as a}from"./app-BReS_GMx.js";const l={},r=a('<h1 id="nlesxw" tabindex="-1"><a class="header-anchor" href="#nlesxw"><span>nLesxw</span></a></h1><div class="hint-container tip"><p class="hint-container-title">简介</p><p><br><em>web地板砖选手。</em> <br><em>每天都想的搞一些好玩的事，又菜又爱玩代言人。</em><br><em>理想是成为大嘿阔，目前在学调查取证。</em></p></div><h2 id="调查取证" tabindex="-1"><a class="header-anchor" href="#调查取证"><span>调查取证</span></a></h2>',3),u={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"windows",-1),k=n("em",null,"在注册表中隐藏着许多不为人知的秘密",-1),m=n("br",null,null,-1),v={href:"https://www.oulub.com/Python/library.winreg",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> winreg <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">def</span> <span class="token function">printNets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    net <span class="token operator">=</span> <span class="token string">&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\NetworkList\\\\Signatures\\\\Unmanaged&quot;</span>
    key <span class="token operator">=</span> OpenKey<span class="token punctuation">(</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span> net<span class="token punctuation">)</span>   <span class="token comment">#打开该目录，返回所有句柄</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;test:&#39;</span><span class="token punctuation">)</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            guid <span class="token operator">=</span> EnumKey<span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">)</span>     <span class="token comment">#枚举每个句柄，返回该句柄的键</span>
            netKey <span class="token operator">=</span> OpenKey<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>guid<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># 枚举打开注册表项的值，并返回一个元组，第一个参数为键，第二个参数为索引</span>
            <span class="token punctuation">(</span>n<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=</span> EnumValue<span class="token punctuation">(</span>netKey<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#获取DefaultGatewayMac的数据，即获取该wifi的mac地址，返回为十六进制</span>
            <span class="token punctuation">(</span>n<span class="token punctuation">,</span> name<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=</span> EnumValue<span class="token punctuation">(</span>netKey<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">#获取FirstNetwork的数据，即获取wifi的名称</span>
            <span class="token comment">#判断是否有mac地址</span>
            <span class="token keyword">if</span> addr<span class="token punctuation">:</span>
                macAddr <span class="token operator">=</span> val2addr<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                macAddr <span class="token operator">=</span> <span class="token string">&#39;None&#39;</span>
            netName <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[+]&#39;</span> <span class="token operator">+</span> netName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> macAddr<span class="token punctuation">)</span>
            CloseKey<span class="token punctuation">(</span>netKey<span class="token punctuation">)</span>     <span class="token comment">#获取一个句柄内容后，关闭句柄</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>       <span class="token comment">#如果没有可迭代的内容就结束循环</span>
            <span class="token keyword">break</span>
<span class="token comment">#对句柄下的mac地址数据，以常见的形式返回</span>
<span class="token keyword">def</span> <span class="token function">val2addr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
    addr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token comment">#print(val.hex())</span>
    n <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> val<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr <span class="token operator">+=</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        n <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            addr <span class="token operator">+=</span> <span class="token string">&#39;:&#39;</span>
    <span class="token keyword">return</span> addr<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    printNets<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function h(w,y){const e=p("ExternalLinkIcon");return o(),c("div",null,[r,n("div",u,[d,n("p",null,[k,s(),m,n("em",null,[n("a",v,[s("python的winreg库的学习链接"),i(e)])])])]),b])}const g=t(l,[["render",h],["__file","nLesxw.html.vue"]]),x=JSON.parse('{"path":"/members/MatrixBreaker/nLesxw.html","title":"nLesxw","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"调查取证","slug":"调查取证","link":"#调查取证","children":[]}],"git":{"createdTime":1648104740000,"updatedTime":1713856527000,"contributors":[{"name":"Crazy4Tech","email":"80889440+Crazy4Tech@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.08,"words":324},"filePathRelative":"members/MatrixBreaker/nLesxw.md","localizedDate":"2022年3月24日"}');export{g as comp,x as data};
